Breadth-First Search Algorithm

The Breadth-first search algorithm is an algorithm used to solve the shortest path problem in a 
graph without edge weights (i.e. a graph where all nodes are the same “distance” from each other, 
and they are either connected or not). This means that given a number of nodes and the edges between them,
the Breadth-first search algorithm is finds the shortest path from the specified start node to all other nodes. 
Nodes are sometimes referred to as vertices (plural of vertex) - here, we’ll call them nodes.

Description of the Algorithm
The basic principle behind the Breadth-first search algorithm is to take the current node (the start node
in the beginning) and then add all of its neighbors that we haven’t visited yet to a queue. Continue this 
with the next node in the queue (in a queue that is the “oldest” node). Before we add a node to the queue,
we set its distance to the distance of the current node plus 1 (since all edges are weighted equally),
with the distance to the start node being 0. This is repeated until there are no more nodes in the queue 
(all nodes are visited).

In more detail, this leads to the following Steps:

    1. Initialize the distance to the starting node as 0. The distances to all other node do not need to 
    be initialized since every node is visited exactly once.
    2. Set all nodes to “unvisited”
    3. Add the first node to the queue and label it visited.
    4. While there are nodes in the queue:

        1. Take a node out of the queue
        2. For all nodes next to it that we haven’t visited yet, add them to the queue, set their distance 
        to the distance to the current node plus 1, and set them as “visited”

IMPLEMENTATION:

package bfs.c.simple;

import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;

/**
 * Used to perform Breadth-First-Search (BFS) using adjacency matrices.
 * For a faster implementation, see @see ../fast/BFS.java (using adjacency Lists)
 */
public class BFS {
    /**
     * Implementation of Breadth-First-Search using adjacency matrix.
     * This returns nothing (yet), it is meant to be a template for whatever you want to do with it,
     * e.g. finding the shortest path in a unweighted graph.
     * This has a runtime of O(|V|^2) (|V| = number of Nodes), for a faster implementation see @see ../fast/BFS.java (using adjacency Lists)
     *
     * @param graph an adjacency-matrix-representation of the graph where (x,y) is true if the the there is an edge between nodes x and y.
     * @param start the node to start from.
     * @return an array containing the shortest distances from the given start node to each other node
     */
    public static int[] bfs(boolean[][] graph, int start) {
        //A Queue to manage the nodes that have yet to be visited
        Queue<Integer> queue = new PriorityQueue<>();
        //Adding the node to start from
        queue.add(start);
        //A boolean array indicating whether we have already visited a node
        boolean[] visited = new boolean[graph.length];
        //(The start node is already visited)
        visited[start] = true;
        // Keeping the distances (might not be necessary depending on your use case)
        int[] distances = new int[graph.length]; // No need to set initial values since every node is visted exactly once
        //While there are nodes left to visit...
        while (!queue.isEmpty()) {
            System.out.println("Visited nodes: " + Arrays.toString(visited));
            System.out.println("Distances: " + Arrays.toString(distances));
            int node = queue.remove();
            System.out.println("Removing node " + node + " from the queue...");
            //...for all neighboring nodes that haven't been visited yet....
            for (int i = 1; i < graph[node].length; i++) {
                if (graph[node][i] && !visited[i]) {
                    // Do whatever you want to do with the node here.
                    // Visit it, set the distance and add it to the queue
                    visited[i] = true;
                    distances[i] = distances[node] + 1;
                    queue.add(i);
                    System.out.println("Visiting node " + i + ", setting its distance to " + distances[i] + " and adding it to the queue");

                }
            }
        }
        System.out.println("No more nodes in the queue. Distances: " + Arrays.toString(distances));
        return distances;
    }
}
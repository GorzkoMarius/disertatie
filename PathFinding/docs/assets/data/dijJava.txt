Dijkstra's Algorithm
The Dijkstra algorithm is an algorithm used to solve the shortest path problem in a graph. 
This means that given a number of nodes and the edges between them as well as the “length” 
of the edges (referred to as “weight”), the Dijkstra algorithm is finds the shortest path 
from the specified start node to all other nodes. Nodes are sometimes referred to as vertices 
(plural of vertex) - here, we’ll call them nodes.

Description of the Algorithm
The basic principle behind the Dijkstra algorithm is to iteratively look at the node with the 
currently smallest distance to the source and update all not yet visited neighbors if the path 
to it via the current node is shorter. In more detail, this leads to the following Steps:

    1. Initialize the distance to the starting node as 0 and the distances to all other nodes as infinite
    2. Set all nodes to “unvisited”
    3. While we haven’t visited all nodes:

        1. Find the node with currently shortest distance from the source (for the first pass, 
        this will be the source node itself)
        2. For all nodes next to it that we haven’t visited yet, check if the currently smallest 
        distance to that neighbor is bigger than if we were to go via the current node
        3. If it is, update the smallest distance of that neighbor to be the distance from the source 
        to the current node plus the distance from the current node to that neighbor

In the end, the array we used to keep track of the currently shortest distance from the 
source to all other nodes will contain the (final) shortest distances.

IMPLEMENTATION:

package dijkstra.java.simple;

import java.util.Arrays;

/**
 * Used to perform the dijkstra Algorithm using adjacency matrices.
 * For a faster implementation, see @see ../fast/Dijkstra.java (using adjacency Lists)
 */
public class Dijkstra {
    /**
     * Implementation of dijkstra using adjacency matrix.
     * This returns an array containing the length of the shortest path from the start node to each other node.
     * It is only guaranteed to return correct results if there are no negative edges in the graph. Positive cycles are fine.
     * This has a runtime of O(|V|^2) (|V| = number of Nodes), for a faster implementation see @see ../fast/Dijkstra.java (using adjacency lists)
     *
     * @param graph an adjacency-matrix-representation of the graph where (x,y) is the weight of the edge or 0 if there is no edge.
     * @param start the node to start from.
     * @return an array containing the shortest distances from the given start node to each other node
     */
    public static int[] dijkstra(int[][] graph, int start) {

        //This contains the distances from the start node to all other nodes
        int[] distances = new int[graph.length];
        //Initializing with a distance of "Infinity"
        Arrays.fill(distances, Integer.MAX_VALUE);
        //The distance from the start node to itself is of course 0
        distances[start] = 0;

        //This contains whether a node was already visited
        boolean[] visited = new boolean[graph.length];

        //While there are nodes left to visit...
        while (true) {

            // ... find the node with the currently shortest distance from the start node...
            int shortestDistance = Integer.MAX_VALUE;
            int shortestIndex = -1;
            for (int i = 0; i < graph.length; i++) {
                //... by going through all nodes that haven't been visited yet
                if (distances[i] < shortestDistance && !visited[i]) {
                    shortestDistance = distances[i];
                    shortestIndex = i;
                }
            }

            System.out.println("Visiting node " + shortestDistance + " with current distance " + shortestDistance);

            if (shortestIndex == -1) {
                // There was no node not yet visited --> We are done
                return distances;
            }

            //...then, for all neighboring nodes....
            for (int i = 0; i < graph[shortestIndex].length; i++) {
                //...if the path over this edge is shorter...
                if (graph[shortestIndex][i] != 0 && distances[i] > distances[shortestIndex] + graph[shortestIndex][i]) {
                    //...Save this path as new shortest path.
                    distances[i] = distances[shortestIndex] + graph[shortestIndex][i];
                    System.out.println("Updating distance of node " + i + " to " + distances[i]);
                }
            }
            // Lastly, note that we are finished with this node.
            visited[shortestIndex] = true;
            System.out.println("Visited nodes: " + Arrays.toString(visited));
            System.out.println("Currently lowest distances: " + Arrays.toString(distances));

        }
    }
}